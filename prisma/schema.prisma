generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  theme        String   @default("default")
  provider     String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workouts      Workout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exercise {
  id                String                   @id(map: "exercises_pkey")
  name              String                   @unique(map: "exercises_name_key")
  primary_muscles   muscle[]
  secondary_muscles muscle[]
  force             forcetype?
  level             leveltype
  mechanic          mechanictype?
  equipment         equipmenttype?
  category          categorytype
  instructions      String[]
  tsVector          Unsupported("tsvector")? @default(dbgenerated("setweight(to_tsvector('english'::regconfig, COALESCE(name, ''::text)), 'A'::\"char\")"))
  sets              Set[]

  @@index([tsVector], map: "excerise_tsVector_idx", type: Gin)
  @@index([name(ops: raw("gist_trgm_ops"))], map: "exercise_trgm_idx", type: Gist)
}

model Workout {
  id        String   @id
  title     String
  userId    String
  created   DateTime @default(now())
  completed Boolean? @default(false)
  sets      Set[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Set {
  id             String         @id
  exerciseId     String
  index          Int
  routineId      String?
  workoutId      String?
  exercise       Exercise       @relation(fields: [exerciseId], references: [id])
  workout        Workout?       @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exertion       Exertion?
  resistence     Resistence?
}

model Exertion {
  id         String       @id
  set        Set          @relation(fields: [setId], references: [id])
  setId      String       @unique
  type       exertiontype
  value      String
  unit       distanceunit?
}

model Resistence {
  id         String       @id
  set        Set          @relation(fields: [setId], references: [id])
  setId      String       @unique
  type       resistencetype
  value      String
  unit       weightunit?
}

enum resistencetype {
  weight
  machine_setting @map("machine setting")
  body_weight     @map("body weight")
  band
}

enum exertiontype {
  time
  reps
  distance_travelled @map("distance travelled")
  heart_rate         @map("heart rate")
  calories_burned    @map("calories burned")
  power_output       @map("power output")
}

enum weightunit {
  lbs
  kg
}

enum distanceunit {
  miles
  km
}

enum categorytype {
  strength
  stretching
  plyometrics
  strongman
  powerlifting
  cardio
  olympic_weightlifting @map("olympic weightlifting")
}

enum equipmenttype {
  body_only     @map("body only")
  machine
  other
  foam_roll     @map("foam roll")
  kettlebells
  dumbbell
  cable
  barbell
  medicine_ball @map("medicine ball")
  bands
  exercise_ball @map("exercise ball")
  e_z_curl_bar  @map("e-z curl bar")
}

enum forcetype {
  pull
  push
  static
}

enum leveltype {
  beginner
  intermediate
  expert
}

enum mechanictype {
  compound
  isolation
}

enum muscle {
  abdominals
  hamstrings
  adductors
  quadriceps
  biceps
  shoulders
  chest
  middle_back @map("middle back")
  calves
  glutes
  lower_back  @map("lower back")
  lats
  triceps
  traps
  forearms
  neck
  abductors
}

